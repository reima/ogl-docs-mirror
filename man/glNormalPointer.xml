<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook MathML Module V1.1b1//EN"
              "http://www.oasis-open.org/docbook/xml/mathml/1.1CR1/dbmathml.dtd">
<refentry id="glNormalPointer">
    <refmeta>
        <refmetainfo>
            <copyright>
                <year>1991-2006</year>
                <holder>Silicon Graphics, Inc.</holder>
            </copyright>
        </refmetainfo>
        <refentrytitle>glNormalPointer</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glNormalPointer</refname>
        <refpurpose>define an array of normals</refpurpose>
    </refnamediv>
    <refsynopsisdiv><title>C Specification</title>
        <funcsynopsis>
            <funcprototype>
                <funcdef> void <function>glNormalPointer</function></funcdef>
                <paramdef> GLenum <parameter>type</parameter></paramdef>
                <paramdef> GLsizei <parameter>stride</parameter></paramdef>
                <paramdef> const GLvoid * <parameter>ptr</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <!-- eqn: ignoring delim $$ -->
    <refsect1><title>PARAMETERS</title>
        <variablelist>
        <varlistentry>
            <term><parameter>type</parameter></term>
            <listitem>
                <para>
                    Specifies the data type of each coordinate in the array.
                    Symbolic constants
                    <constant>GL_BYTE</constant>,
                    <constant>GL_SHORT</constant>,
                    <constant>GL_INT</constant>,
                    <constant>GL_FLOAT</constant>, and
                    <constant>GL_DOUBLE</constant>
                    are accepted. The initial value is <constant>GL_FLOAT</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>stride</parameter></term>
            <listitem>
                <para>
                    Specifies the byte offset between consecutive normals. If <parameter>stride</parameter> is
                    0 - the initial value - the normals are understood to be tightly packed in
                    the array.
                    The initial value is 0.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>ptr</parameter></term>
            <listitem>
                <para>
                    Specifies a pointer to the first coordinate of the first normal in the
                    array.
                    The initial value is 0.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1><title>DESCRIPTION</title>
        <para>
            <function>glNormalPointer</function> specifies the location and data format of an array of normals
            to use when rendering.
            <parameter>type</parameter> specifies the data type of
            the normal coordinates and <parameter>stride</parameter> gives the byte stride from one
            normal to the next, allowing vertices and attributes
            to be packed into a single array or stored in separate arrays.
            (Single-array storage may be more efficient on some implementations;
            see <citerefentry><refentrytitle>glInterleavedArrays</refentrytitle></citerefentry>.)
            When a normal array is specified, <parameter>type</parameter>, <parameter>stride</parameter>, and <parameter>ptr</parameter> are
            saved as client-side state.
        </para>
        <para>
            To enable and disable the normal array, call <citerefentry><refentrytitle>glEnableClientState</refentrytitle></citerefentry> and
            <citerefentry><refentrytitle>glDisableClientState</refentrytitle></citerefentry> with the argument <constant>GL_NORMAL_ARRAY</constant>. If
            enabled, the normal array is used
            when <citerefentry><refentrytitle>glDrawArrays</refentrytitle></citerefentry>, <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>, or <citerefentry><refentrytitle>glArrayElement</refentrytitle></citerefentry> is called.
        </para>
        <para>
            Use <citerefentry><refentrytitle>glDrawArrays</refentrytitle></citerefentry> to construct a sequence of primitives (all of the
            same type) from prespecified vertex and vertex attribute arrays.
            Use <citerefentry><refentrytitle>glArrayElement</refentrytitle></citerefentry> to specify primitives
            by indexing vertices and vertex attributes and <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry> to
            construct a sequence of primitives by indexing vertices and vertex attributes.
        </para>
    </refsect1>
    <refsect1><title>NOTES</title>
        <para>
            <function>glNormalPointer</function> is available only if the GL version is 1.1 or greater.
        </para>
        <para>
            The normal array is initially disabled and isn't accessed when
            <citerefentry><refentrytitle>glArrayElement</refentrytitle></citerefentry>, <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>, or <citerefentry><refentrytitle>glDrawArrays</refentrytitle></citerefentry> is called.
        </para>
        <para>
            Execution of <function>glNormalPointer</function> is not allowed between
            <citerefentry><refentrytitle>glBegin</refentrytitle></citerefentry> and the corresponding <citerefentry><refentrytitle>glEnd</refentrytitle></citerefentry>,
            but an error may or may not be generated. If an error is not generated,
            the operation is undefined.
        </para>
        <para>
            <function>glNormalPointer</function> is typically implemented on the client side.
        </para>
        <para>
            Since the normal array parameters are client-side state, they are not
            saved or restored by <citerefentry><refentrytitle>glPushAttrib</refentrytitle></citerefentry> and <citerefentry><refentrytitle>glPopAttrib</refentrytitle></citerefentry>.
            Use <citerefentry><refentrytitle>glPushClientAttrib</refentrytitle></citerefentry> and
            <citerefentry><refentrytitle>glPopClientAttrib</refentrytitle></citerefentry> instead.
        </para>
    </refsect1>
    <refsect1><title>ERRORS</title>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>type</parameter> is not an accepted value.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>stride</parameter> is negative.
        </para>
    </refsect1>
    <refsect1><title>ASSOCIATED GETS</title>
        <para>
            <citerefentry><refentrytitle>glIsEnabled</refentrytitle></citerefentry> with argument <constant>GL_NORMAL_ARRAY</constant>
        </para>
        <para>
            <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument <constant>GL_NORMAL_ARRAY_TYPE</constant>
        </para>
        <para>
            <citerefentry><refentrytitle>glGet</refentrytitle></citerefentry> with argument <constant>GL_NORMAL_ARRAY_STRIDE</constant>
        </para>
        <para>
            <citerefentry><refentrytitle>glGetPointerv</refentrytitle></citerefentry> with argument <constant>GL_NORMAL_ARRAY_POINTER</constant>
        </para>
    </refsect1>
    <refsect1><title>SEE ALSO</title>
        <para>
            <citerefentry><refentrytitle>glArrayElement</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glColorPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDrawArrays</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glDrawElements</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glEdgeFlagPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glEnable</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glGetPointerv</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glIndexPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glInterleavedArrays</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glPopClientAttrib</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glPushClientAttrib</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glSecondaryColorPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glTexCoordPointer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glVertexPointer</refentrytitle></citerefentry>
        </para>
    </refsect1>
    <refsect1><title>COPYRIGHT</title>
        <para>
            Copyright <trademark class="copyright"></trademark> 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <ulink url="http://oss.sgi.com/projects/FreeB/">http://oss.sgi.com/projects/FreeB/</ulink>.
        </para>
    </refsect1>
</refentry>
