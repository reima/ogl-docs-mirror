<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>glDrawElements</title><meta name="generator" content="DocBook XSL Stylesheets V1.69.1" /></head><body><div class="refentry" lang="en" xml:lang="en"><a id="glDrawElements"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glDrawElements — render primitives from array data</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr><td><code class="funcdef"> void <b class="fsfunc">glDrawElements</b>(</code></td><td><var class="pdparam">mode</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">count</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">type</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">indices</var><code>)</code>;</td><td> </td></tr></table><table border="0" summary="Function argument synopsis" cellspacing="0" cellpadding="0"><tr><td> GLenum  </td><td><var class="pdparam">mode</var>;</td></tr><tr><td> GLsizei  </td><td><var class="pdparam">count</var>;</td></tr><tr><td> GLenum  </td><td><var class="pdparam">type</var>;</td></tr><tr><td> const GLvoid *  </td><td><var class="pdparam">indices</var>;</td></tr></table></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4781559"></a><h2>PARAMETERS</h2><div class="variablelist"><dl><dt><span class="term"><em class="parameter"><code>mode</code></em></span></dt><dd><p>
                    Specifies what kind of primitives to render.
                    Symbolic constants
                    <code class="constant">GL_POINTS</code>,
                    <code class="constant">GL_LINE_STRIP</code>,
                    <code class="constant">GL_LINE_LOOP</code>,
                    <code class="constant">GL_LINES</code>,
                    <code class="constant">GL_TRIANGLE_STRIP</code>,
                    <code class="constant">GL_TRIANGLE_FAN</code>,
                    <code class="constant">GL_TRIANGLES</code>,
                    <code class="constant">GL_QUAD_STRIP</code>,
                    <code class="constant">GL_QUADS</code>,
                    and <code class="constant">GL_POLYGON</code> are accepted.
                </p></dd><dt><span class="term"><em class="parameter"><code>count</code></em></span></dt><dd><p>
                    Specifies the number of elements to be rendered.
                </p></dd><dt><span class="term"><em class="parameter"><code>type</code></em></span></dt><dd><p>
                    Specifies the type of the values in <em class="parameter"><code>indices</code></em>. Must be one of
                    <code class="constant">GL_UNSIGNED_BYTE</code>, <code class="constant">GL_UNSIGNED_SHORT</code>, or
                    <code class="constant">GL_UNSIGNED_INT</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>indices</code></em></span></dt><dd><p>
                    Specifies a pointer to the location where the indices are stored.
                </p></dd></dl></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4768254"></a><h2>DESCRIPTION</h2><p>
            <code class="function">glDrawElements</code> specifies multiple geometric primitives
            with very few subroutine calls. Instead of calling a GL function
            to pass each individual vertex, normal, texture coordinate, edge
            flag, or color, you can prespecify
            separate arrays of vertices, normals, and so on, and use them to
            construct a sequence of primitives with a single
            call to <code class="function">glDrawElements</code>.
        </p><p>
            When <code class="function">glDrawElements</code> is called, it uses <em class="parameter"><code>count</code></em> sequential elements from an
            enabled array, starting at <em class="parameter"><code>indices</code></em> to construct a sequence of
            geometric primitives. <em class="parameter"><code>mode</code></em> specifies what kind of primitives are
            constructed and how the array elements construct these primitives. If
            more than one array is enabled, each is used. If
            <code class="constant">GL_VERTEX_ARRAY</code> is not enabled, no geometric primitives are
            constructed.
        </p><p>
            Vertex attributes that are modified by <code class="function">glDrawElements</code> have an
            unspecified value after <code class="function">glDrawElements</code> returns. For example, if
            <code class="constant">GL_COLOR_ARRAY</code> is enabled, the value of the current color is
            undefined after <code class="function">glDrawElements</code> executes. Attributes that aren't
            modified maintain their previous values.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4774913"></a><h2>NOTES</h2><p>
            <code class="function">glDrawElements</code> is available only if the GL version is 1.1 or greater.
        </p><p>
            <code class="function">glDrawElements</code> is included in display lists. If <code class="function">glDrawElements</code> is entered into a
            display list,
            the necessary array data (determined by the array pointers and
            enables) is also
            entered into the display list. Because the array pointers and
            enables are client-side state, their values affect display lists
            when the lists are created, not when the lists are executed.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4774966"></a><h2>ERRORS</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>mode</code></em> is not an accepted value.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>count</code></em> is negative.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to an
            enabled array or the element array and the buffer object's data store is currently mapped.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <code class="function">glDrawElements</code> is executed between
            the execution of <span class="citerefentry"><span class="refentrytitle">glBegin</span></span> and the corresponding <span class="citerefentry"><span class="refentrytitle">glEnd</span></span>.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4775031"></a><h2>SEE ALSO</h2><p>
            <span class="citerefentry"><span class="refentrytitle">glArrayElement</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glColorPointer</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glDrawArrays</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glDrawRangeElements</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glEdgeFlagPointer</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glFogCoordPointer</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glGetPointerv</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glIndexPointer</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glInterleavedArrays</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glNormalPointer</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glSecondaryColorPointer</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glTexCoordPointer</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glVertexPointer</span></span>
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4775108"></a><h2>COPYRIGHT</h2><p>
            Copyright <span class="trademark"></span>© 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a href="http://oss.sgi.com/projects/FreeB/" target="_top">http://oss.sgi.com/projects/FreeB/</a>.
        </p></div></div></body></html>
