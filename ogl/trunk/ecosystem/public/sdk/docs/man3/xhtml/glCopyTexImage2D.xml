<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "xhtml1-transitional.dtd">
<!-- saved from url=(0013)about:internet -->
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:pref="http://www.w3.org/2002/Math/preference" pref:renderer="mathplayer-dl"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><link rel="stylesheet" type="text/css" href="opengl-man.css" /><title>glCopyTexImage2D</title><meta name="generator" content="DocBook XSL Stylesheets V1.69.1" /></head><body><div class="refentry" lang="en" xml:lang="en"><a id="glCopyTexImage2D"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glCopyTexImage2D — copy pixels into a 2D texture image</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr><td><code class="funcdef">void <b class="fsfunc">glCopyTexImage2D</b>(</code></td><td>GLenum  </td><td><var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLint  </td><td><var class="pdparam">level</var>, </td></tr><tr><td> </td><td>GLenum  </td><td><var class="pdparam">internalformat</var>, </td></tr><tr><td> </td><td>GLint  </td><td><var class="pdparam">x</var>, </td></tr><tr><td> </td><td>GLint  </td><td><var class="pdparam">y</var>, </td></tr><tr><td> </td><td>GLsizei  </td><td><var class="pdparam">width</var>, </td></tr><tr><td> </td><td>GLsizei  </td><td><var class="pdparam">height</var>, </td></tr><tr><td> </td><td>GLint  </td><td><var class="pdparam">border</var><code>)</code>;</td></tr></table></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    Specifies the target texture.
                    Must be <code class="constant">GL_TEXTURE_2D</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_X</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</code>, or
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>level</code></em></span></dt><dd><p>
                    Specifies the level-of-detail number.
                    Level 0 is the base image level.
                    Level <span class="emphasis"><em>n</em></span> is the <span class="emphasis"><em>n</em></span>th mipmap reduction image.
                </p></dd><dt><span class="term"><em class="parameter"><code>internalformat</code></em></span></dt><dd><p>
                    Specifies the internal format of the texture.
                    Must be one of the following symbolic constants:
                    <code class="constant">GL_COMPRESSED_RED</code>,
                    <code class="constant">GL_COMPRESSED_RG</code>,
                    <code class="constant">GL_COMPRESSED_RGB</code>,
                    <code class="constant">GL_COMPRESSED_RGBA</code>.
                    <code class="constant">GL_COMPRESSED_SRGB</code>,
                    <code class="constant">GL_COMPRESSED_SRGB_ALPHA</code>.
                    <code class="constant">GL_DEPTH_COMPONENT</code>,
                    <code class="constant">GL_DEPTH_COMPONENT16</code>,
                    <code class="constant">GL_DEPTH_COMPONENT24</code>,
                    <code class="constant">GL_DEPTH_COMPONENT32</code>,
                    <code class="constant">GL_RED</code>,
                    <code class="constant">GL_RG</code>,
                    <code class="constant">GL_RGB</code>,
                    <code class="constant">GL_R3_G3_B2</code>,
                    <code class="constant">GL_RGB4</code>,
                    <code class="constant">GL_RGB5</code>,
                    <code class="constant">GL_RGB8</code>,
                    <code class="constant">GL_RGB10</code>,
                    <code class="constant">GL_RGB12</code>,
                    <code class="constant">GL_RGB16</code>,
                    <code class="constant">GL_RGBA</code>,
                    <code class="constant">GL_RGBA2</code>,
                    <code class="constant">GL_RGBA4</code>,
                    <code class="constant">GL_RGB5_A1</code>,
                    <code class="constant">GL_RGBA8</code>,
                    <code class="constant">GL_RGB10_A2</code>,
                    <code class="constant">GL_RGBA12</code>,
                    <code class="constant">GL_RGBA16</code>,
                    <code class="constant">GL_SRGB</code>,
                    <code class="constant">GL_SRGB8</code>,
                    <code class="constant">GL_SRGB_ALPHA</code>, or 
                    <code class="constant">GL_SRGB8_ALPHA8</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>x</code></em>, </span><span class="term"><em class="parameter"><code>y</code></em></span></dt><dd><p>
                    Specify the window coordinates of the lower left corner
                    of the rectangular region of pixels to be copied.
                </p></dd><dt><span class="term"><em class="parameter"><code>width</code></em></span></dt><dd><p>
                    Specifies the width of the texture image.
                    Must be 0 or 
                    <span class="ERROR">&lt;math&gt;
                        
                        <span class="ERROR">&lt;mrow&gt;
                            <span class="ERROR">&lt;msup&gt;<span class="ERROR">&lt;mn&gt;2&lt;/mn&gt;</span>
                            <span class="ERROR">&lt;mi&gt;n&lt;/mi&gt;</span>
                            &lt;/msup&gt;</span>
                            <span class="ERROR">&lt;mo&gt;+&lt;/mo&gt;</span>
                            <span class="ERROR">&lt;mrow&gt;
                                <span class="ERROR">&lt;mn&gt;2&lt;/mn&gt;</span>
                                <span class="ERROR">&lt;mo&gt;&lt;/mo&gt;</span>
                                <span class="ERROR">&lt;mfenced&gt;
                                    <span class="ERROR">&lt;mi&gt;border&lt;/mi&gt;</span>
                                &lt;/mfenced&gt;</span>
                            &lt;/mrow&gt;</span>
                        &lt;/mrow&gt;</span>
                    &lt;/math&gt;</span>
                    for some integer 
                    <span class="ERROR">&lt;math&gt;<span class="ERROR">&lt;mi&gt;n&lt;/mi&gt;</span>&lt;/math&gt;</span>.
                </p></dd><dt><span class="term"><em class="parameter"><code>height</code></em></span></dt><dd><p>
                    Specifies the height of the texture image.
                    Must be 0 or 
                    <span class="ERROR">&lt;math&gt;
                        
                        <span class="ERROR">&lt;mrow&gt;
                            <span class="ERROR">&lt;msup&gt;<span class="ERROR">&lt;mn&gt;2&lt;/mn&gt;</span>
                            <span class="ERROR">&lt;mi&gt;m&lt;/mi&gt;</span>
                            &lt;/msup&gt;</span>
                            <span class="ERROR">&lt;mo&gt;+&lt;/mo&gt;</span>
                            <span class="ERROR">&lt;mrow&gt;
                                <span class="ERROR">&lt;mn&gt;2&lt;/mn&gt;</span>
                                <span class="ERROR">&lt;mo&gt;&lt;/mo&gt;</span>
                                <span class="ERROR">&lt;mfenced&gt;
                                    <span class="ERROR">&lt;mi&gt;border&lt;/mi&gt;</span>
                                &lt;/mfenced&gt;</span>
                            &lt;/mrow&gt;</span>
                        &lt;/mrow&gt;</span>
                    &lt;/math&gt;</span>
                    for some integer 
                    <span class="ERROR">&lt;math&gt;<span class="ERROR">&lt;mi&gt;m&lt;/mi&gt;</span>&lt;/math&gt;</span>.
                </p></dd><dt><span class="term"><em class="parameter"><code>border</code></em></span></dt><dd><p>
                    Specifies the width of the border.
                    Must be either 0 or 1.
                </p></dd></dl></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="description"></a><h2>Description</h2><p>
            <code class="function">glCopyTexImage2D</code> defines a two-dimensional texture image, or cube-map texture image
            with pixels from the current
            <code class="constant">GL_READ_BUFFER</code>.
        </p><p>
            The screen-aligned pixel rectangle with lower left corner at (<em class="parameter"><code>x</code></em>,
            <em class="parameter"><code>y</code></em>) and with a width of 
            <span class="ERROR">&lt;math&gt;
                
                <span class="ERROR">&lt;mrow&gt;
                    <span class="ERROR">&lt;mi&gt;width&lt;/mi&gt;</span>
                    <span class="ERROR">&lt;mo&gt;+&lt;/mo&gt;</span>
                    <span class="ERROR">&lt;mrow&gt;
                        <span class="ERROR">&lt;mn&gt;2&lt;/mn&gt;</span>
                        <span class="ERROR">&lt;mo&gt;&lt;/mo&gt;</span>
                        <span class="ERROR">&lt;mfenced&gt;
                            <span class="ERROR">&lt;mi&gt;border&lt;/mi&gt;</span>
                        &lt;/mfenced&gt;</span>
                    &lt;/mrow&gt;</span>
                &lt;/mrow&gt;</span>
            &lt;/math&gt;</span>
            and a height of
            <span class="ERROR">&lt;math&gt;
                
                <span class="ERROR">&lt;mrow&gt;
                    <span class="ERROR">&lt;mi&gt;height&lt;/mi&gt;</span>
                    <span class="ERROR">&lt;mo&gt;+&lt;/mo&gt;</span>
                    <span class="ERROR">&lt;mrow&gt;
                        <span class="ERROR">&lt;mn&gt;2&lt;/mn&gt;</span>
                        <span class="ERROR">&lt;mo&gt;&lt;/mo&gt;</span>
                        <span class="ERROR">&lt;mfenced&gt;
                            <span class="ERROR">&lt;mi&gt;border&lt;/mi&gt;</span>
                        &lt;/mfenced&gt;</span>
                    &lt;/mrow&gt;</span>
                &lt;/mrow&gt;</span>
            &lt;/math&gt;</span>
            defines the texture array
            at the mipmap level specified by <em class="parameter"><code>level</code></em>.
            <em class="parameter"><code>internalformat</code></em> specifies the internal format of the texture array.
        </p><p>
            The pixels in the rectangle are processed exactly as if
            <a href="glCopyPixels.xml"><span class="citerefentry"><span class="refentrytitle">glCopyPixels</span></span></a> had been called, but the process stops just before
            final conversion.
            At this point all pixel component values are clamped to the range 
            <span class="ERROR">&lt;math&gt;
                
                <span class="ERROR">&lt;mfenced&gt;
                    <span class="ERROR">&lt;mn&gt;0&lt;/mn&gt;</span>
                    <span class="ERROR">&lt;mn&gt;1&lt;/mn&gt;</span>
                &lt;/mfenced&gt;</span>
            &lt;/math&gt;</span>
            and then converted to the texture's internal format for storage in the texel
            array.
        </p><p>
            Pixel ordering is such that lower 
            <span class="ERROR">&lt;math&gt;<span class="ERROR">&lt;mi&gt;x&lt;/mi&gt;</span>&lt;/math&gt;</span>
            and 
            <span class="ERROR">&lt;math&gt;<span class="ERROR">&lt;mi&gt;y&lt;/mi&gt;</span>&lt;/math&gt;</span>
            screen coordinates correspond to
            lower 
            <span class="ERROR">&lt;math&gt;<span class="ERROR">&lt;mi&gt;s&lt;/mi&gt;</span>&lt;/math&gt;</span>
            and 
            <span class="ERROR">&lt;math&gt;<span class="ERROR">&lt;mi&gt;t&lt;/mi&gt;</span>&lt;/math&gt;</span>
            texture coordinates.
        </p><p>
            If any of the pixels within the specified rectangle of the current
            <code class="constant">GL_READ_BUFFER</code> are outside the window associated with the current
            rendering context, then the values obtained for those pixels are undefined.
        </p><p>
            When <em class="parameter"><code>internalformat</code></em> is one of the sRGB  types, the GL does not automatically convert the source pixels to the sRGB color space.  In this case, the <code class="function">glPixelMap</code> function can be used to accomplish the conversion.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="notes"></a><h2>Notes</h2><p>
            1, 2, 3, and 4 are not accepted values for <em class="parameter"><code>internalformat</code></em>.
        </p><p>
            An image with height or width of 0 indicates a NULL texture.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> is not <code class="constant">GL_TEXTURE_2D</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_X</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</code>, or
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>level</code></em> is less than 0.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> may be generated if <em class="parameter"><code>level</code></em> is greater
            than 
            <span class="ERROR">&lt;math&gt;
                
                <span class="ERROR">&lt;mrow&gt;
                    <span class="ERROR">&lt;msub&gt;<span class="ERROR">&lt;mi&gt;log&lt;/mi&gt;</span>
                    <span class="ERROR">&lt;mn&gt;2&lt;/mn&gt;</span>
                    &lt;/msub&gt;</span>
                    <span class="ERROR">&lt;mo&gt;&lt;/mo&gt;</span>
                    <span class="ERROR">&lt;mi&gt;max&lt;/mi&gt;</span>
                &lt;/mrow&gt;</span>
            &lt;/math&gt;</span>,
            where 
            <span class="ERROR">&lt;math&gt;<span class="ERROR">&lt;mi&gt;max&lt;/mi&gt;</span>&lt;/math&gt;</span>
            is the returned value of <code class="constant">GL_MAX_TEXTURE_SIZE</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>width</code></em> is less than 0
            or greater than
            2 + <code class="constant">GL_MAX_TEXTURE_SIZE</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if non-power-of-two textures are not supported and the <em class="parameter"><code>width</code></em> or <em class="parameter"><code>depth</code></em> cannot be represented as  
            <span class="ERROR">&lt;math&gt;
                
                <span class="ERROR">&lt;mrow&gt;
                    <span class="ERROR">&lt;msup&gt;<span class="ERROR">&lt;mn&gt;2&lt;/mn&gt;</span>
                    <span class="ERROR">&lt;mi&gt;k&lt;/mi&gt;</span>
                    &lt;/msup&gt;</span>
                    <span class="ERROR">&lt;mo&gt;+&lt;/mo&gt;</span>
                    <span class="ERROR">&lt;mrow&gt;
                        <span class="ERROR">&lt;mn&gt;2&lt;/mn&gt;</span>
                        <span class="ERROR">&lt;mo&gt;&lt;/mo&gt;</span>
                        <span class="ERROR">&lt;mfenced&gt;
                            <span class="ERROR">&lt;mi&gt;border&lt;/mi&gt;</span>
                        &lt;/mfenced&gt;</span>
                    &lt;/mrow&gt;</span>
                &lt;/mrow&gt;</span>
            &lt;/math&gt;</span>
            for some integer 
            <span class="ERROR">&lt;math&gt;<span class="ERROR">&lt;mi&gt;k&lt;/mi&gt;</span>&lt;/math&gt;</span>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>border</code></em> is not 0 or 1.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>internalformat</code></em> is not an
            accepted format.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>internalformat</code></em> is
            <code class="constant">GL_DEPTH_COMPONENT</code>, <code class="constant">GL_DEPTH_COMPONENT16</code>,
            <code class="constant">GL_DEPTH_COMPONENT24</code>, or <code class="constant">GL_DEPTH_COMPONENT32</code> and there is no depth
            buffer.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="associatedgets"></a><h2>Associated Gets</h2><p>
            <a href="glGetTexImage.xml"><span class="citerefentry"><span class="refentrytitle">glGetTexImage</span></span></a>
        </p><p>
            <a href="glIsEnabled.xml"><span class="citerefentry"><span class="refentrytitle">glIsEnabled</span></span></a> with argument <code class="constant">GL_TEXTURE_2D</code> or <code class="constant">GL_TEXTURE_CUBE_MAP</code> 
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="seealso"></a><h2>See Also</h2><p>
            <a href="glCopyPixels.xml"><span class="citerefentry"><span class="refentrytitle">glCopyPixels</span></span></a>,
            <a href="glCopyTexImage1D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexImage1D</span></span></a>,
            <a href="glCopyTexSubImage1D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexSubImage1D</span></span></a>,
            <a href="glCopyTexSubImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glCopyTexSubImage2D</span></span></a>,
            <a href="glPixelStore.xml"><span class="citerefentry"><span class="refentrytitle">glPixelStore</span></span></a>,
            <a href="glPixelTransfer.xml"><span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span></a>,
            <a href="glTexEnv.xml"><span class="citerefentry"><span class="refentrytitle">glTexEnv</span></span></a>,
            <a href="glTexImage1D.xml"><span class="citerefentry"><span class="refentrytitle">glTexImage1D</span></span></a>,
            <a href="glTexImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>,
            <a href="glTexSubImage1D.xml"><span class="citerefentry"><span class="refentrytitle">glTexSubImage1D</span></span></a>,
            <a href="glTexSubImage2D.xml"><span class="citerefentry"><span class="refentrytitle">glTexSubImage2D</span></span></a>,
            <a href="glTexParameter.xml"><span class="citerefentry"><span class="refentrytitle">glTexParameter</span></span></a>
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="Copyright"></a><h2>Copyright</h2><p>
            Copyright <span class="trademark"></span>© 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a href="http://oss.sgi.com/projects/FreeB/" target="_top">http://oss.sgi.com/projects/FreeB/</a>.
        </p></div></div></body></html>
