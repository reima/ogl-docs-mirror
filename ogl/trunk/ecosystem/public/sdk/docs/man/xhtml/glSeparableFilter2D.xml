<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<?xml-stylesheet type="text/xsl" href="mathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>glSeparableFilter2D</title><meta name="generator" content="DocBook XSL Stylesheets V1.69.1" /></head><body><div class="refentry" lang="en" xml:lang="en"><a id="glSeparableFilter2D"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glSeparableFilter2D — define a separable two-dimensional convolution filter</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr><td><code class="funcdef"> void <b class="fsfunc">glSeparableFilter2D</b>(</code></td><td><var class="pdparam">target</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">internalformat</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">width</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">height</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">format</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">type</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">row</var>, </td><td> </td></tr><tr><td> </td><td><var class="pdparam">column</var><code>)</code>;</td><td> </td></tr></table><table border="0" summary="Function argument synopsis" cellspacing="0" cellpadding="0"><tr><td> GLenum  </td><td><var class="pdparam">target</var>;</td></tr><tr><td> GLenum  </td><td><var class="pdparam">internalformat</var>;</td></tr><tr><td> GLsizei  </td><td><var class="pdparam">width</var>;</td></tr><tr><td> GLsizei  </td><td><var class="pdparam">height</var>;</td></tr><tr><td> GLenum  </td><td><var class="pdparam">format</var>;</td></tr><tr><td> GLenum  </td><td><var class="pdparam">type</var>;</td></tr><tr><td> const GLvoid *  </td><td><var class="pdparam">row</var>;</td></tr><tr><td> const GLvoid *  </td><td><var class="pdparam">column</var>;</td></tr></table></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4781664"></a><h2>PARAMETERS</h2><div class="variablelist"><dl><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    Must be <code class="constant">GL_SEPARABLE_2D</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>internalformat</code></em></span></dt><dd><p>
                    The internal format of the convolution filter kernel.
                    The allowable values are
                    <code class="constant">GL_ALPHA</code>,
                    <code class="constant">GL_ALPHA4</code>,
                    <code class="constant">GL_ALPHA8</code>,
                    <code class="constant">GL_ALPHA12</code>,
                    <code class="constant">GL_ALPHA16</code>,
                    <code class="constant">GL_LUMINANCE</code>,
                    <code class="constant">GL_LUMINANCE4</code>,
                    <code class="constant">GL_LUMINANCE8</code>,
                    <code class="constant">GL_LUMINANCE12</code>,
                    <code class="constant">GL_LUMINANCE16</code>,
                    <code class="constant">GL_LUMINANCE_ALPHA</code>,
                    <code class="constant">GL_LUMINANCE4_ALPHA4</code>,
                    <code class="constant">GL_LUMINANCE6_ALPHA2</code>,
                    <code class="constant">GL_LUMINANCE8_ALPHA8</code>,
                    <code class="constant">GL_LUMINANCE12_ALPHA4</code>,
                    <code class="constant">GL_LUMINANCE12_ALPHA12</code>,
                    <code class="constant">GL_LUMINANCE16_ALPHA16</code>,
                    <code class="constant">GL_INTENSITY</code>,
                    <code class="constant">GL_INTENSITY4</code>,
                    <code class="constant">GL_INTENSITY8</code>,
                    <code class="constant">GL_INTENSITY12</code>,
                    <code class="constant">GL_INTENSITY16</code>,
                    <code class="constant">GL_R3_G3_B2</code>,
                    <code class="constant">GL_RGB</code>,
                    <code class="constant">GL_RGB4</code>,
                    <code class="constant">GL_RGB5</code>,
                    <code class="constant">GL_RGB8</code>,
                    <code class="constant">GL_RGB10</code>,
                    <code class="constant">GL_RGB12</code>,
                    <code class="constant">GL_RGB16</code>,
                    <code class="constant">GL_RGBA</code>,
                    <code class="constant">GL_RGBA2</code>,
                    <code class="constant">GL_RGBA4</code>,
                    <code class="constant">GL_RGB5_A1</code>,
                    <code class="constant">GL_RGBA8</code>,
                    <code class="constant">GL_RGB10_A2</code>,
                    <code class="constant">GL_RGBA12</code>, or
                    <code class="constant">GL_RGBA16</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>width</code></em></span></dt><dd><p>
                    The number of elements in the pixel array referenced by <em class="parameter"><code>row</code></em>.
                    (This is the width of the separable filter kernel.)
                </p></dd><dt><span class="term"><em class="parameter"><code>height</code></em></span></dt><dd><p>
                    The number of elements in the pixel array referenced by <em class="parameter"><code>column</code></em>.
                    (This is the height of the separable filter kernel.)
                </p></dd><dt><span class="term"><em class="parameter"><code>format</code></em></span></dt><dd><p>
                    The format of the pixel data in <em class="parameter"><code>row</code></em> and <em class="parameter"><code>column</code></em>.
                    The allowable values are
                    <code class="constant">GL_RED</code>,
                    <code class="constant">GL_GREEN</code>,
                    <code class="constant">GL_BLUE</code>,
                    <code class="constant">GL_ALPHA</code>,
                    <code class="constant">GL_RGB</code>,
                    <code class="constant">GL_BGR</code>,
                    <code class="constant">GL_RGBA</code>,
                    <code class="constant">GL_BGRA</code>,
                    <code class="constant">GL_INTENSITY</code>,
                    <code class="constant">GL_LUMINANCE</code>, and
                    <code class="constant">GL_LUMINANCE_ALPHA</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>type</code></em></span></dt><dd><p>
                    The type of the pixel data in <em class="parameter"><code>row</code></em> and <em class="parameter"><code>column</code></em>.
                    Symbolic constants
                    <code class="constant">GL_UNSIGNED_BYTE</code>,
                    <code class="constant">GL_BYTE</code>,
                    <code class="constant">GL_BITMAP</code>,
                    <code class="constant">GL_UNSIGNED_SHORT</code>,
                    <code class="constant">GL_SHORT</code>,
                    <code class="constant">GL_UNSIGNED_INT</code>,
                    <code class="constant">GL_INT</code>,
                    <code class="constant">GL_FLOAT</code>,
                    <code class="constant">GL_UNSIGNED_BYTE_3_3_2</code>,
                    <code class="constant">GL_UNSIGNED_BYTE_2_3_3_REV</code>,
                    <code class="constant">GL_UNSIGNED_SHORT_5_6_5</code>,
                    <code class="constant">GL_UNSIGNED_SHORT_5_6_5_REV</code>,
                    <code class="constant">GL_UNSIGNED_SHORT_4_4_4_4</code>,
                    <code class="constant">GL_UNSIGNED_SHORT_4_4_4_4_REV</code>,
                    <code class="constant">GL_UNSIGNED_SHORT_5_5_5_1</code>,
                    <code class="constant">GL_UNSIGNED_SHORT_1_5_5_5_REV</code>,
                    <code class="constant">GL_UNSIGNED_INT_8_8_8_8</code>,
                    <code class="constant">GL_UNSIGNED_INT_8_8_8_8_REV</code>,
                    <code class="constant">GL_UNSIGNED_INT_10_10_10_2</code>, and
                    <code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code>
                    are accepted.
                </p></dd><dt><span class="term"><em class="parameter"><code>row</code></em></span></dt><dd><p>
                    Pointer to a one-dimensional array of pixel data that is processed to
                    build the row filter kernel.
                </p></dd><dt><span class="term"><em class="parameter"><code>column</code></em></span></dt><dd><p>
                    Pointer to a one-dimensional array of pixel data that is processed to
                    build the column filter kernel.
                </p></dd></dl></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4775277"></a><h2>DESCRIPTION</h2><p>
            <code class="function">glSeparableFilter2D</code> builds a two-dimensional separable convolution filter kernel from
            two arrays of pixels.
        </p><p>
            The pixel arrays specified by (<em class="parameter"><code>width</code></em>, <em class="parameter"><code>format</code></em>, <em class="parameter"><code>type</code></em>, <em class="parameter"><code>row</code></em>)
            and (<em class="parameter"><code>height</code></em>, <em class="parameter"><code>format</code></em>, <em class="parameter"><code>type</code></em>, <em class="parameter"><code>column</code></em>) are processed just as if
            they had been passed to <span class="citerefentry"><span class="refentrytitle">glDrawPixels</span></span>,
            but processing stops after the final expansion to RGBA is completed.
        </p><p>
            If a non-zero named buffer object is bound to the <code class="constant">GL_PIXEL_UNPACK_BUFFER</code> target 
            (see <span class="citerefentry"><span class="refentrytitle">glBindBuffer</span></span>) while a convolution filter is
            specified, <em class="parameter"><code>row</code></em> and <em class="parameter"><code>column</code></em> are treated as byte offsets into the buffer object's data store.
        </p><p>
            Next, the R, G, B, and A components of all pixels in both arrays are scaled
            by the four separable 2D <code class="constant">GL_CONVOLUTION_FILTER_SCALE</code> parameters and
            biased by the four separable 2D <code class="constant">GL_CONVOLUTION_FILTER_BIAS</code> parameters.
            (The scale and bias parameters are set by <span class="citerefentry"><span class="refentrytitle">glConvolutionParameter</span></span>
            using the <code class="constant">GL_SEPARABLE_2D</code> target and the names
            <code class="constant">GL_CONVOLUTION_FILTER_SCALE</code> and <code class="constant">GL_CONVOLUTION_FILTER_BIAS</code>.
            The parameters themselves are vectors of four values that are applied to red,
            green, blue, and alpha, in that order.)
            The R, G, B, and A values are not clamped to [0,1] at any time during this
            process.
        </p><p>
            Each pixel is then converted to the internal format specified by
            <em class="parameter"><code>internalformat</code></em>.
            This conversion simply maps the component values of the pixel (R, G, B,
            and A) to the values included in the internal format (red, green, blue,
            alpha, luminance, and intensity).  The mapping is as follows:
        </p><div class="informaltable"><table border="1"><colgroup><col align="left" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /><col align="center" /></colgroup><thead><tr><th align="left"><span class="bold"><strong>
                        Internal Format
                        </strong></span></th><th align="center"><span class="bold"><strong>
                        Red
                        </strong></span></th><th align="center"><span class="bold"><strong>
                        Green
                        </strong></span></th><th align="center"><span class="bold"><strong>
                        Blue
                        </strong></span></th><th align="center"><span class="bold"><strong>
                        Alpha
                        </strong></span></th><th align="center"><span class="bold"><strong>
                        Luminance
                        </strong></span></th><th align="center"><span class="bold"><strong>
                        Intensity
                        </strong></span></th></tr></thead><tbody><tr><td align="left">
                        <code class="constant">GL_LUMINANCE</code>
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                        R
                        </td><td align="center">
                         
                        </td></tr><tr><td align="left">
                        <code class="constant">GL_LUMINANCE_ALPHA</code>
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                        A
                        </td><td align="center">
                        R
                        </td><td align="center">
                         
                        </td></tr><tr><td align="left">
                        <code class="constant">GL_INTENSITY</code>
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                        R
                        </td></tr><tr><td align="left">
                        <code class="constant">GL_RGB</code>
                        </td><td align="center">
                        R
                        </td><td align="center">
                        G
                        </td><td align="center">
                        B
                        </td><td align="center">
                        </td><td align="center">
                        </td><td align="center">
                         
                        </td></tr><tr><td align="left">
                        <code class="constant">GL_RGBA</code>
                        </td><td align="center">
                        R
                        </td><td align="center">
                        G
                        </td><td align="center">
                        B
                        </td><td align="center">
                        A
                        </td><td align="center">
                        </td><td align="center">
                         
                        </td></tr></tbody></table></div><p>
            The red, green, blue, alpha, luminance, and/or intensity components of
            the resulting pixels are stored in floating-point rather than integer
            format.
            They form two one-dimensional filter kernel images.
            The row image is indexed by coordinate <span class="emphasis"><em>i</em></span> starting at zero and
            increasing from left to right.
            Each location in the row image is derived from element <span class="emphasis"><em>i</em></span> of <em class="parameter"><code>row</code></em>.
            The column image is indexed by coordinate <span class="emphasis"><em>j</em></span> starting at zero
            and increasing from bottom to top.
            Each location in the column image is derived from element <span class="emphasis"><em>j</em></span> of <em class="parameter"><code>column</code></em>.
        </p><p>
            Note that after a convolution is performed, the resulting color
            components are also scaled by their corresponding
            <code class="constant">GL_POST_CONVOLUTION_c_SCALE</code> parameters and biased by their
            corresponding <code class="constant">GL_POST_CONVOLUTION_c_BIAS</code> parameters (where
            <span class="emphasis"><em>c</em></span> takes on the values <span class="bold"><strong>RED</strong></span>, <span class="bold"><strong>GREEN</strong></span>, <span class="bold"><strong>BLUE</strong></span>, and
            <span class="bold"><strong>ALPHA</strong></span>).
            These parameters are set by <span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span>.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4711166"></a><h2>NOTES</h2><p>
            <code class="function">glSeparableFilter2D</code> is present only if <code class="code">ARB_imaging</code> is returned when <span class="citerefentry"><span class="refentrytitle">glGetString</span></span>
            is called with an argument of <code class="constant">GL_EXTENSIONS</code>.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4711195"></a><h2>ERRORS</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> is not
            <code class="constant">GL_SEPARABLE_2D</code>.
        </p><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>internalformat</code></em> is not one of the
            allowable values.
        </p><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>format</code></em> is not one of the allowable
            values.
        </p><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>type</code></em> is not one of the allowable
            values.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>width</code></em> is less than zero or greater
            than the maximum supported value.
            This value may be queried with <span class="citerefentry"><span class="refentrytitle">glGetConvolutionParameter</span></span>
            using target <code class="constant">GL_SEPARABLE_2D</code> and name
            <code class="constant">GL_MAX_CONVOLUTION_WIDTH</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>height</code></em> is less than zero or greater
            than the maximum supported value.
            This value may be queried with <span class="citerefentry"><span class="refentrytitle">glGetConvolutionParameter</span></span>
            using target <code class="constant">GL_SEPARABLE_2D</code> and name
            <code class="constant">GL_MAX_CONVOLUTION_HEIGHT</code>.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>height</code></em> is one of
            <code class="constant">GL_UNSIGNED_BYTE_3_3_2</code>,
            <code class="constant">GL_UNSIGNED_BYTE_2_3_3_REV</code>,
            <code class="constant">GL_UNSIGNED_SHORT_5_6_5</code>, or
            <code class="constant">GL_UNSIGNED_SHORT_5_6_5_REV</code>
            and <em class="parameter"><code>format</code></em> is not <code class="constant">GL_RGB</code>.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <em class="parameter"><code>height</code></em> is one of
            <code class="constant">GL_UNSIGNED_SHORT_4_4_4_4</code>,
            <code class="constant">GL_UNSIGNED_SHORT_4_4_4_4_REV</code>,
            <code class="constant">GL_UNSIGNED_SHORT_5_5_5_1</code>,
            <code class="constant">GL_UNSIGNED_SHORT_1_5_5_5_REV</code>,
            <code class="constant">GL_UNSIGNED_INT_8_8_8_8</code>,
            <code class="constant">GL_UNSIGNED_INT_8_8_8_8_REV</code>,
            <code class="constant">GL_UNSIGNED_INT_10_10_10_2</code>, or
            <code class="constant">GL_UNSIGNED_INT_2_10_10_10_REV</code>
            and <em class="parameter"><code>format</code></em> is neither <code class="constant">GL_RGBA</code> nor <code class="constant">GL_BGRA</code>.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to the
            <code class="constant">GL_PIXEL_UNPACK_BUFFER</code> target and the buffer object's data store is currently mapped.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to the
            <code class="constant">GL_PIXEL_UNPACK_BUFFER</code> target and the data would be unpacked from the buffer 
            object such that the memory reads required would exceed the data store size.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if a non-zero buffer object name is bound to the
            <code class="constant">GL_PIXEL_UNPACK_BUFFER</code> target and <em class="parameter"><code>row</code></em> or 
            <em class="parameter"><code>column</code></em> is not evenly divisible 
            into the number of bytes needed to store in memory a datum indicated by <em class="parameter"><code>type</code></em>.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <code class="function">glSeparableFilter2D</code> is executed
            between the execution of <span class="citerefentry"><span class="refentrytitle">glBegin</span></span> and the corresponding
            execution of <span class="citerefentry"><span class="refentrytitle">glEnd</span></span>.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4711523"></a><h2>ASSOCIATED GETS</h2><p>
            <span class="citerefentry"><span class="refentrytitle">glGetConvolutionParameter</span></span>, <span class="citerefentry"><span class="refentrytitle">glGetSeparableFilter</span></span>
        </p><p>
            <span class="citerefentry"><span class="refentrytitle">glGet</span></span> with argument <code class="constant">GL_PIXEL_UNPACK_BUFFER_BINDING</code>
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4711554"></a><h2>SEE ALSO</h2><p>
            <span class="citerefentry"><span class="refentrytitle">glConvolutionFilter1D</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glConvolutionFilter2D</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glConvolutionParameter</span></span>,
            <span class="citerefentry"><span class="refentrytitle">glPixelTransfer</span></span>
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="id4711584"></a><h2>COPYRIGHT</h2><p>
            Copyright <span class="trademark"></span>© 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a href="http://oss.sgi.com/projects/FreeB/" target="_top">http://oss.sgi.com/projects/FreeB/</a>.
        </p></div></div></body></html>
